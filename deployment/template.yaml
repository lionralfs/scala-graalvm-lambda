AWSTemplateFormatVersion: 2010-09-09
Description: Example stack for a Lambda that is written in scala

Transform: AWS::Serverless-2016-10-31 # see https://stackoverflow.com/a/62290398/6596135

Parameters:
  lambdaFunctionName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+'
    Default: scala-graalvm-lambda

Resources:
  lambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      AutoPublishAlias: live
      CodeUri: ../target/scala-2.13/lambda-scala.jar
      Handler: example.Handler::handleRequest
      Runtime: java11
      MemorySize: 256
      Timeout: 20
      FunctionName: !Ref lambdaFunctionName
      Role: !GetAtt lambdaIAMRole.Arn
      #      SnapStart:
      #        ApplyOn: PublishedVersions
      Environment:
        Variables:
          AWS_LAMBDA_EXEC_WRAPPER: /opt/otel-sqs-handler
          OPENTELEMETRY_COLLECTOR_CONFIG_FILE: s3://<bucket-name>.s3.<bucket-region>.amazonaws.com/collector_config.yaml
      Layers:
        - arn:aws:lambda:eu-central-1:901920570463:layer:aws-otel-java-wrapper-amd64-ver-1-26-0:2
      Tracing: PassThrough # this is specific to AWS::Serverless::Function


  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: allowToWriteLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*
        - PolicyName: allowToAccessBucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - arn:aws:s3:::<bucket-name>/*

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunctionName}
      RetentionInDays: 7

  queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: test-queue

  queuepolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: LambdaQueuePolicy
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:role/lambdaRole
            Action:
              - sqs:*
            Resource: !GetAtt queue.Arn
      Queues:
        - !Ref queue

  eventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt queue.Arn
      FunctionName: !Ref lambdaFunctionName
      BatchSize: 100
      MaximumBatchingWindowInSeconds: 10

Outputs:
  lambdaArn:
    Value: !GetAtt lambdaFunction.Arn
